
const questions = [
    {
        id: "concept-pod",
        prompt: "CONCEPT: The smallest unit in Kubernetes that wraps a container. You get more of these within a node as user base increases. Usually has a one to one ratio with containers but could have helper containers. ",
        answer: "pod",
        hint: ["pod", "container", "node", "replica"],
      },
      {
        id: "concept-helper-container",
        prompt: "CONCEPT: A supporting container that shares the same pod and network space with another container, allowing them to communicate over localhost",
        answer: "helper container",
        hint: ["helper container", "sidecar", "companion container", "shared container"],
      },
    {
        id: "concept-nerdctl",
        prompt: "CONCEPT: A Docker-compatible CLI that works with containerd",
        answer: "nerdctl",
        hint: ["nerdctl", "containerd cli", "docker replacement", "container cli"],
    },
    {
        id: "concept-crictl",
        prompt: "CONCEPT: A CLI that can replace Docker commands and work directly with Kubernetes and pods works across all cri runtimes",
        answer: "crictl",
        hint: ["crictl", "docker alt", "kubernetes cli", "runtime cli"],
    },
    {
        id: "concept-containerd",
        prompt: "CONCEPT: Describe containerd and its historical relationship to Docker",
        answer: "container d",
        hint: ["container d", "docker runtime", "container engine", "c runtime"],
    },
    {
        id: "concept-node",
        prompt: "CONCEPT: The basic compute machine that runs your containers",
        answer: "node",
        hint: ["node", "cluster", "pod", "vm"],
      },
      {
        id: "concept-cluster",
        prompt: "CONCEPT: A group of nodes managed by Kubernetes",
        answer: "cluster",
        hint: ["cluster", "node", "pod group", "container farm"],
      },
      {
        id: "concept-container",
        prompt: "CONCEPT: A lightweight, standalone, and executable software package",
        answer: "container",
        hint: ["container", "image", "runtime", "module"],
      },
      {
        id: "concept-master-node",
        prompt: "CONCEPT: The control plane component that manages the Kubernetes cluster. Contains the API server, etcd, scheduler, and controller manager.",
        answer: "master",
        hint: ["master", "controller", "scheduler", "manager"],
      },
      {
        id: "concept-worker-node",
        prompt: "CONCEPT: The working  component that executes container. Contains container runtime and kubelet.",
        answer: "worker",
        hint: ["worker", "controller", "scheduler", "manager"],
      },
      {
        id: "concept-api-server",
        prompt: "CONCEPT: The frontend that handles communication with the Kubernetes CLI",
        answer: "api server",
        hint: ["api server", "frontend", "gateway", "control server"],
      },
      {
        id: "concept-etcd",
        prompt: "CONCEPT: Key-value store for all cluster data",
        answer: "etcd",
        hint: ["etcd", "redis", "yaml", "dbstore"],
      },
      {
        id: "concept-scheduler",
        prompt: "CONCEPT: Assigns containers to available nodes",
        answer: "scheduler",
        hint: ["scheduler", "assigner", "watcher", "node balancer"],
      },
      {
        id: "concept-controller",
        prompt: "CONCEPT: Detects and responds to state changes in the cluster",
        answer: "controller",
        hint: ["controller", "scheduler", "api server", "state manager"],
      },
      {
        id: "concept-container-runtime",
        prompt: "CONCEPT: The software used to run containers (e.g., Docker)",
        answer: "container runtime",
        hint: ["container runtime", "docker", "podman", "engine"],
      },
      {
        id: "concept-kubelet",
        prompt: "CONCEPT: Runs on each node and ensures containers are running",
        answer: "kubelet",
        hint: ["kubelet", "node agent", "watcher", "scheduler"],
      },
    {
      id: "kubectl",
      prompt: "TERMINAL: CLI tool to interact with Kubernetes",
      answer: "kubectl",
      hint: ["kubectl", "minikube", "kubernetesctl", "kube"],
    },
    {
      id: "kubectl get pods",
      prompt: "TERMINAL: Command to list all pods",
      answer: "get pods",
      hint: ["get pods", "list pods", "show pods", "pods list"],
    },
    {
      id: "kubectl describe",
      prompt: "TERMINAL: Show detailed information about a resource",
      answer: "describe",
      hint: ["describe", "show", "list", "inspect"],
    },
    {
      id: "kubectl exec",
      prompt: "TERMINAL: Execute a command inside a container",
      answer: "exec",
      hint: ["exec", "run", "ssh", "enter"],
    },
    {
      id: "kubectl logs",
      prompt: "TERMINAL: View logs for a pod",
      answer: "logs",
      hint: ["logs", "output", "events", "info"],
    },
    {
      id: "kubectl expose",
      prompt: "TERMINAL: Create a service to expose a pod",
      answer: "expose",
      hint: ["expose", "serve", "show", "deploy"],
    },
    {
      id: "kubectl set-image",
      prompt: "TERMINAL: This command updates the container image used in a deployment",
      answer: "set image",
      hint: ["kubectl set image", "kubectl display pods", "minikube set image", "kubectl set pods"],
    },
    {
      id: "kubectl create deployment",
      prompt: "TERMINAL: Command to create a new deployment",
      answer: "create deployment",
      hint: ["create deployment", "make deployment", "deploy create", "init deployment"],
    },
    {
      id: "kubectl proxy",
      prompt: "TERMINAL: Start a local proxy to access Kubernetes API",
      answer: "proxy",
      hint: ["proxy", "tunnel", "gateway", "pipe"],
    },
    {
      id: "kubectl apply",
      prompt: "TERMINAL: Apply a config file to a resource",
      answer: "apply",
      hint: ["apply", "create", "set", "config"],
    },
    {
      id: "kubectl get services",
      prompt: "TERMINAL: List all services",
      answer: "get services",
      hint: ["get services", "show services", "list svc", "display services"],
    },
    {
      id: "minikube start",
      prompt: "TERMINAL: Command to start your local Kubernetes cluster",
      answer: "minikube start",
      hint: ["minikube start", "kubectl start", "start cluster", "init minikube"],
    },
    {
      id: "minikube stop",
      prompt: "TERMINAL: Stop your Minikube cluster",
      answer: "minikube stop",
      hint: ["minikube stop", "kubectl stop", "shutdown cluster", "halt minikube"],
    },
    {
      id: "minikube pause",
      prompt: "TERMINAL: Pause all workloads in your local cluster",
      answer: "minikube pause",
      hint: ["minikube pause", "kubectl pause", "pause cluster", "stop workloads"],
    },
    {
      id: "minikube unpause",
      prompt: "TERMINAL: Resume paused workloads",
      answer: "minikube unpause",
      hint: ["minikube unpause", "kubectl resume", "restart cluster", "unpause minikube"],
    },
    {
      id: "kubectl get nodes",
      prompt: "TERMINAL: Command to view nodes in your cluster",
      answer: "get nodes",
      hint: ["get nodes", "list nodes", "show nodes", "nodes status"],
    },
    {
      id: "kubectl get deployments",
      prompt: "TERMINAL: List all deployments",
      answer: "get deployments",
      hint: ["get deployments", "show deployments", "list deploys", "deployments get"],
    },
    {
      id: "kubectl get services",
      prompt: "TERMINAL: List all services",
      answer: "get services",
      hint: ["get services", "list services", "show services", "services"],
    },
    {
      id: "kubectl rollout undo",
      prompt: "TERMINAL: Rollback a deployment to a previous version",
      answer: "rollout undo",
      hint: ["rollout undo", "revert", "rollback", "undo deploy"],
    },
    {
      id: "kubectl delete pod",
      prompt: "TERMINAL: Remove a pod",
      answer: "delete pod",
      hint: ["delete pod", "remove pod", "terminate pod", "kill pod"],
    },
    {
      id: "kubectl port-forward",
      prompt: "TERMINAL: Forward a local port to a pod",
      answer: "port-forward",
      hint: ["port-forward", "forward-port", "proxy-port", "connect-port"],
    },
    {
      id: "kubectl run",
      prompt: "TERMINAL: Run a pod with a specific image",
      answer: "run",
      hint: ["run", "launch", "create pod", "exec image"],
    },
    {
      id: "kubectl config view",
      prompt: "TERMINAL: View kubeconfig settings",
      answer: "config view",
      hint: ["config view", "view config", "show config", "kube config"],
    },
    {
      id: "kubectl config use-context",
      prompt: "TERMINAL: Switch active cluster context",
      answer: "config use-context",
      hint: ["config use-context", "switch context", "change context", "set context"],
    },
    {
      id: "kubectl get all",
      prompt: "TERMINAL: Show all resources in the namespace",
      answer: "get all",
      hint: ["get all", "show all", "list all", "get everything"],
    },
    {
      id: "kubectl explain",
      prompt: "TERMINAL: Explain a resource or command",
      answer: "explain",
      hint: ["explain", "describe", "help", "details"],
    },
    {
      id: "kubectl apply -f",
      prompt: "TERMINAL: Apply a manifest file",
      answer: "apply -f",
      hint: ["apply -f", "use -f", "create -f", "deploy -f"],
    },
    {
      id: "kubectl delete service",
      prompt: "TERMINAL: Delete a service",
      answer: "delete service",
      hint: ["delete service", "remove svc", "destroy service", "stop service"]
    },
    {
        id: "kubectl scale",
        prompt: "TERMINAL: Make four replicas of a pod",
        answer: "kubectl scale relative/path --replicas=4",
        hint: ["kubectl scale relative/path --replicas=4", "kubectl resize relative/path --replicas=4", "kubectl set relative/path --replicas=4", "kubectl replicate relative/path --replicas=4"],
      },
      {
        id: "kubectl set image full",
        prompt: "TERMINAL: Set a specific image for a pod in a deployment",
        answer: "kubectl set image path/pod pod-name=gcr.io/org/podname:vx",
        hint: ["kubectl set image path/pod pod-name=gcr.io/org/podname:vx", "kubectl set image pod=...", "set image deployment", "image rollout"],
      },
      {
        id: "kubectl rollout status",
        prompt: "TERMINAL: Check the rollout status of a deployment",
        answer: "kubectl rollout status deployments/pod",
        hint: ["kubectl rollout status deployments/pod", "kubectl status", "rollout check", "status deploy"],
      },
      {
        id: "kubectl rollout undo full",
        prompt: "TERMINAL: Undo the last rollout of a deployment",
        answer: "kubectl rollout undo deployments/kubernetes-bootcamp",
        hint: ["kubectl rollout undo deployments/kubernetes-bootcamp", "rollout undo", "undo deploy", "rollback"],
      },
      {
        id: "kubectl run ngninx from container",
        prompt: "TERMINAL: build a pod from a container image",
        answer: "kubectl run nginx --image=nginx",
        hint: ["kubectl run nginx --image=nginx", "kubectl exec ninginx --image=nginx", "kubectl run nginx", "kubectl create pod nginx"],
      },
      {
        id: "kubectl create deployment full",
        prompt: "TERMINAL: Create a deployment named nginx using the nginx image",
        answer: "kubectl create deployment nginx --image=nginx",
        hint: ["kubectl create deployment nginx --image=nginx", "create nginx", "kubectl create image", "nginx deploy"],
      },
      {
        id: "yaml-api-version",
        prompt: "YAML: Defines the version of the Kubernetes API you're using",
        answer: "apiVersion",
        hint: ["apiVersion", "api", "version", "kind"],
      },
      {
        id: "yaml-kind",
        prompt: "YAML: Specifies the type of Kubernetes object (e.g., Pod, Deployment)",
        answer: "kind",
        hint: ["kind", "type", "object", "resource"],
      },
      {
        id: "yaml-metadata",
        prompt: "YAML: Section that contains name, labels, and annotations for the object",
        answer: "metadata",
        hint: ["metadata", "labels", "name", "annotations"],
      },
      {
        id: "yaml-spec",
        prompt: "YAML: Defines the desired state of the object",
        answer: "spec",
        hint: ["spec", "template", "state", "details"],
      },
      {
        id: "kubectl apply pod",
        prompt: "TERMINAL: Apply a pod configuration from a YAML file",
        answer: "kubectl apply -f pod.yaml",
        hint: ["kubectl apply -f pod.yaml", "kubectl create -f pod.yaml", "apply pod.yaml", "kubectl deploy pod.yaml"],
      }

  ];


  export const kubernetesQuestions = questions